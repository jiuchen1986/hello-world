// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nettest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetTestClient is the client API for NetTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetTestClient interface {
	ListNumbers(ctx context.Context, in *Start, opts ...grpc.CallOption) (NetTest_ListNumbersClient, error)
}

type netTestClient struct {
	cc grpc.ClientConnInterface
}

func NewNetTestClient(cc grpc.ClientConnInterface) NetTestClient {
	return &netTestClient{cc}
}

func (c *netTestClient) ListNumbers(ctx context.Context, in *Start, opts ...grpc.CallOption) (NetTest_ListNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetTest_ServiceDesc.Streams[0], "/nettest.NetTest/ListNumbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &netTestListNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetTest_ListNumbersClient interface {
	Recv() (*Number, error)
	grpc.ClientStream
}

type netTestListNumbersClient struct {
	grpc.ClientStream
}

func (x *netTestListNumbersClient) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetTestServer is the server API for NetTest service.
// All implementations must embed UnimplementedNetTestServer
// for forward compatibility
type NetTestServer interface {
	ListNumbers(*Start, NetTest_ListNumbersServer) error
	mustEmbedUnimplementedNetTestServer()
}

// UnimplementedNetTestServer must be embedded to have forward compatible implementations.
type UnimplementedNetTestServer struct {
}

func (UnimplementedNetTestServer) ListNumbers(*Start, NetTest_ListNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNumbers not implemented")
}
func (UnimplementedNetTestServer) mustEmbedUnimplementedNetTestServer() {}

// UnsafeNetTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetTestServer will
// result in compilation errors.
type UnsafeNetTestServer interface {
	mustEmbedUnimplementedNetTestServer()
}

func RegisterNetTestServer(s grpc.ServiceRegistrar, srv NetTestServer) {
	s.RegisterService(&NetTest_ServiceDesc, srv)
}

func _NetTest_ListNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Start)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetTestServer).ListNumbers(m, &netTestListNumbersServer{stream})
}

type NetTest_ListNumbersServer interface {
	Send(*Number) error
	grpc.ServerStream
}

type netTestListNumbersServer struct {
	grpc.ServerStream
}

func (x *netTestListNumbersServer) Send(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

// NetTest_ServiceDesc is the grpc.ServiceDesc for NetTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nettest.NetTest",
	HandlerType: (*NetTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNumbers",
			Handler:       _NetTest_ListNumbers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/nettest/net_test.proto",
}
